plugins {
    id "com.github.dcendents.android-maven" version "2.0"
    id "com.jfrog.bintray" version "1.8.0"
    id "jacoco"
    id "com.github.kt3k.coveralls" version "2.5.0-x"
}
apply plugin: 'com.android.library'

def versionMajor = 0
def versionMinor = 2
def versionPatch = 0
def myVersionCode = versionMajor * 10000 + versionMinor * 100 + versionPatch
def myVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

//noinspection GroovyMissingReturnStatement
android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode myVersionCode
        versionName myVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    implementation "android.arch.lifecycle:common:1.0.3"
    implementation "android.arch.lifecycle:common-java8:1.0.0"

    implementation "com.android.support:support-annotations:${supportVersion}"
    implementation "com.android.support:appcompat-v7:${supportVersion}"
    implementation "com.android.support:preference-v7:${supportVersion}"

    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"

    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${daggerVersion}"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.9'
}

// https://stackoverflow.com/a/34572606/1251958
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompiler.classpath.files
    })
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['eu/darken/R*.class',
                       '**/BuildConfig.class'
            ])
    sourceDirectories = files([
            'src/main/java'
    ])
    executionData = files('build/jacoco/testDebugUnitTest.exec')
}

coveralls {
    jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    sourceDirs = ['src/main/java']
}

def credentialsFile = new File(System.properties['user.home'], ".bintray/bintray.properties")
ext {
    if (credentialsFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(credentialsFile))
        bintrayUser = props['bintray.user']
        bintrayApiKey = props['bintray.apikey']
    }

    bintrayRepo = 'maven'
    bintrayName = 'ommvplib'

    publishedGroupId = 'eu.darken.ommvplib'
    libraryName = 'One More MVP Lib'
    artifact = 'library'

    libraryDescription = 'One More MVP Lib'

    siteUrl = 'https://github.com/d4rken/ommvplib'
    gitUrl = 'https://github.com/d4rken/ommvplib.git'
    issuesUrl = 'https://github.com/d4rken/ommvplib/issues'

    libraryVersion = myVersionName

    developerId = 'darken'
    developerName = 'Matthias Urhahn'
    developerEmail = 'darken@darken.eu'

    licenseName = 'MIT'
    licenseUrl = 'https://github.com/d4rken/ommvplib/blob/master/LICENSE'
    allLicenses = ["MIT"]
}
if (credentialsFile.canRead()) {
    apply from: '../publish-to-bintray.gradle'
}